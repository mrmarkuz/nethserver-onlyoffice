#!/bin/bash

# set firewall port

config show fw_onlyoffice > /dev/null || config set fw_onlyoffice service status enabled TCPPort 8082 access red,green
config getprop fw_onlyoffice NCPort || config setprop fw_onlyoffice NCPort 8082
[ -f /etc/nginx/conf.d/onlyoffice-documentserver.conf ] && rm -f /etc/nginx/conf.d/onlyoffice-documentserver.conf
[ -f /etc/nginx/includes/onlyoffice-http.conf ] && rm -f /etc/nginx/includes/onlyoffice-http.conf
expand-template /etc/nginx/conf.d/ds.conf
signal-event firewall-adjust

# Delete password to force recreation if length < 32 - needed for Webtop - thanks to Klaus Boehme

if [ $(stat -c%s "/var/lib/nethserver/secrets/onlyoffice") -lt 33 ]; then rm -f /var/lib/nethserver/secrets/onlyoffice; fi

# create jwt password if not exist

perl -e"use esmith::util;NethServer::Password->new('onlyoffice',{'length' => 32})->save()->getAscii() || die('Could not generate onlyoffice jwt password');"

# create onlyoffice postgres password

perl -e"use esmith::util;NethServer::Password::store('onlyofficepg') || die('Could not generate onlyoffice postgres password');"

# create onlyoffice secret string

perl -e"use esmith::util;NethServer::Password::store('onlyofficesecret') || die('Could not generate onlyoffice secret string');"

# configure onlyoffice

DIR="/var/www/onlyoffice"
DEFAULT_CONFIG="/etc/onlyoffice/documentserver/default.json"
EXAMPLE_CONFIG="/etc/onlyoffice/documentserver-example/default.json"
SAVED_DEFAULT_CONFIG="$DEFAULT_CONFIG.rpmsave"
PSQL=""
CREATEDB=""
DS_PORT=${DS_PORT:-80}
# DOCSERVICE_PORT=${DOCSERVICE_PORT:-8000}
# SPELLCHECKER_PORT=${SPELLCHECKER_PORT:-8080}
# EXAMPLE_PORT=${EXAMPLE_PORT:-3000}
JWT_ENABLED=${JWT_ENABLED:-true}
JWT_SECRET=${JWT_SECRET:-secret}
JWT_HEADER=${JWT_HEADER:-Authorization}
JWT_SECRET=`cat /var/lib/nethserver/secrets/onlyoffice`
SECRET_STRING=`cat /var/lib/nethserver/secrets/onlyofficesecret`

# get reject unauthorized ssl config

if [[ -n `config getprop fw_onlyoffice RejectUnauthorized` ]]; then REJECT_UNAUTHORIZED=`config getprop fw_onlyoffice RejectUnauthorized`; else REJECT_UNAUTHORIZED=true; fi

# create database if not exist

export PGPASSWORD=`cat /var/lib/nethserver/secrets/onlyofficepg`
CONNECTION_PARAMS="-hlocalhost -Uonlyoffice -w"
PSQL="psql -q $CONNECTION_PARAMS"
CREATEDB="createdb -q $CONNECTION_PARAMS"

su - postgres -c "psql -lqt | cut -d \| -f 1 | grep -q -w onlyoffice"
if [ $? -eq 1 ]; then # database does not exist
  su - postgres -c 'psql -c "CREATE DATABASE onlyoffice;"'
  su - postgres -c "psql -c \"CREATE USER onlyoffice WITH password '$PGPASSWORD';\""
  su - postgres -c 'psql -c "GRANT ALL privileges ON DATABASE onlyoffice TO onlyoffice;"'
else
  su - postgres -c "psql -c \"ALTER USER onlyoffice WITH password '$PGPASSWORD';\""

fi

# db upgrades

for FILE in "$DIR/documentserver/server/schema/postgresql/upgrade/*"; do $PSQL -d "onlyoffice" -f $FILE >/dev/null 2>&1; done

# check if db works correctly

$PSQL -c ";" >/dev/null 2>&1 || { echo "FAILURE"; exit 1; }

# db schema

$PSQL -d "onlyoffice" -f "$DIR/documentserver/server/schema/postgresql/createdb.sql" >/dev/null 2>&1

# change port 8080 to 48080 for spellchecker to not conflict with tomcat
jq -r ".SpellChecker.server.port = 48080" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# change port 8000 to 48000 for coauth to not conflict with webvirtmgr
jq -r ".services.CoAuthoring.server.port = 48000" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# postgres db settings
jq -r ".services.CoAuthoring.sql.dbHost = \"localhost\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.sql.dbName= \"onlyoffice\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.sql.dbUser = \"onlyoffice\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.sql.dbPass = \"${PGPASSWORD}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# RabbitMQ
jq -r ".rabbitmq.url = \"amqp://guest:guest@localhost\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# redis
jq -r ".services.CoAuthoring.redis.host = \"localhost\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# enable jwt token for browser, inbox and outbox
jq -r ".services.CoAuthoring.token.enable.browser = ${JWT_ENABLED}" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.token.enable.request.inbox = ${JWT_ENABLED}" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.token.enable.request.outbox = ${JWT_ENABLED}" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# set secret for browser, session, inbox and outbox
jq -r ".services.CoAuthoring.secret.browser.string = \"${JWT_SECRET}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.secret.inbox.string = \"${JWT_SECRET}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.secret.outbox.string = \"${JWT_SECRET}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.secret.session.string = \"${JWT_SECRET}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# set header, define in JWT_HEADER
jq -r ".services.CoAuthoring.token.inbox.header = \"${JWT_HEADER}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG
jq -r ".services.CoAuthoring.token.outbox.header = \"${JWT_HEADER}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# Allow unauthorized SSL if enabled
jq -r ".services.CoAuthoring.requestDefaults.rejectUnauthorized = ${REJECT_UNAUTHORIZED}" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# Set secret string

jq -r ".storage.fs.secretString = \"${SECRET_STRING}\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# Set metrics statsd port to not conflict with netdata running on 8125

jq -r ".statsd.port = \"8126\"" $DEFAULT_CONFIG > temp.json && mv -f temp.json $DEFAULT_CONFIG

# Change port in config.js too

sed -i 's!port: 8125!port: 8126!' /var/www/onlyoffice/documentserver/server/Metrics/config/config.js

# get fqdn and dshost

export fqdn=`config get SystemName`.`config get DomainName`

[ -z "$(config getprop fw_onlyoffice host)" ] && export dshost=$fqdn || export dshost=$(config getprop fw_onlyoffice host)

if [ -f /usr/share/nextcloud/occ ]; then # check if nextcloud is installed

    # Enable self-signed cert
    grep -q -F "'onlyoffice' => array ( 'verify_peer_off' => TRUE)" /usr/share/nextcloud/config/config.php || sed -i '$i'"'onlyoffice'"' => array ( '"'verify_peer_off'"' => TRUE)' /usr/share/nextcloud/config/config.php

    # Install onlyoffice app
    occ app:install onlyoffice

    # Set DocumentServerUrl
    occ config:app:set onlyoffice DocumentServerUrl --value="https://$dshost:`config getprop fw_onlyoffice NCPort`/"

    # Set token secret
    occ config:app:set onlyoffice jwt_secret --value="$JWT_SECRET"

    # Enable onlyoffice app
    occ app:enable onlyoffice
fi

# check if webtop5 db is present to add onlyoffice config and restart webtop

su - postgres -c "psql -lqt | cut -d \| -f 1 | grep -q -w webtop5"

if [ $? -eq 0 ]; then

su - postgres -c "psql webtop5" <<EOF
INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.secret.in', '$(cat /var/lib/nethserver/secrets/onlyoffice)'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.secret.in'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.secret.out', '$(cat /var/lib/nethserver/secrets/onlyoffice)'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.secret.out'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.loopback.url', 'https://$dshost/webtop'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.loopback.url'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.public.url', 'https://$dshost:`config getprop fw_onlyoffice TCPPort`'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.public.url'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.enabled', 'true'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.enabled'
);

UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.secret.in', value='$(cat /var/lib/nethserver/secrets/onlyoffice)' WHERE key='documentserver.secret.in';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.secret.out', value='$(cat /var/lib/nethserver/secrets/onlyoffice)' WHERE key='documentserver.secret.out';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.loopback.url', value='https://$dshost/webtop' WHERE key='documentserver.loopback.url';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.public.url', value='https://$dshost:`config getprop fw_onlyoffice TCPPort`' WHERE key='documentserver.public.url';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.enabled', value='true' WHERE key='documentserver.enabled';
EOF

systemctl restart tomcat8@webtop

fi

# set owner of config file to onlyoffice

chown ds:ds $DEFAULT_CONFIG
