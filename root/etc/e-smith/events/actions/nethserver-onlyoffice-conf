#!/bin/bash

# set firewall port

config show fw_onlyoffice > /dev/null || config set fw_onlyoffice service status enabled TCPPort 8082 access red,green
[ -f /etc/nginx/conf.d/onlyoffice-documentserver.conf ] && rm -f /etc/nginx/conf.d/onlyoffice-documentserver.conf
[ -f /etc/nginx/includes/onlyoffice-http.conf ] && rm -f /etc/nginx/includes/onlyoffice-http.conf
expand-template /etc/nginx/conf.d/ds.conf
signal-event firewall-adjust

# Delete password to force recreation if length < 32 - needed for Webtop - thanks to Klaus Boehme

if [ $(stat -c%s "/var/lib/nethserver/secrets/onlyoffice") -lt 33 ]; then rm -f /var/lib/nethserver/secrets/onlyoffice; fi

# create password if not exist

perl -e"use esmith::util;NethServer::Password->new('onlyoffice',{'length' => 32})->save()->getAscii() || die('Could not generate onlyoffice password');"

# configure onlyoffice

DIR="/var/www/onlyoffice"
DEFAULT_CONFIG="/etc/onlyoffice/documentserver/default.json"
EXAMPLE_CONFIG="/etc/onlyoffice/documentserver-example/default.json"
SAVED_DEFAULT_CONFIG="$DEFAULT_CONFIG.rpmsave"
PSQL=""
CREATEDB=""
DS_PORT=${DS_PORT:-80}
# DOCSERVICE_PORT=${DOCSERVICE_PORT:-8000}
# SPELLCHECKER_PORT=${SPELLCHECKER_PORT:-8080}
# EXAMPLE_PORT=${EXAMPLE_PORT:-3000}
JWT_ENABLED=${JWT_ENABLED:-true}
JWT_SECRET=${JWT_SECRET:-secret}
JWT_HEADER=${JWT_HEADER:-Authorization}
JWT_SECRET=`cat /var/lib/nethserver/secrets/onlyoffice`

# get reject unauthorized ssl config

if [[ -n `config getprop fw_onlyoffice RejectUnauthorized` ]]; then REJECT_UNAUTHORIZED=`config getprop fw_onlyoffice RejectUnauthorized`; else REJECT_UNAUTHORIZED=true; fi

# create database if not exist

export PGPASSWORD=onlyoffice
CONNECTION_PARAMS="-hlocalhost -Uonlyoffice -w"
PSQL="psql -q $CONNECTION_PARAMS"
CREATEDB="createdb -q $CONNECTION_PARAMS"

su - postgres -c "psql -lqt | cut -d \| -f 1 | grep -q -w onlyoffice"
if [ $? -eq 1 ]; then # database do not exists
  su - postgres -c 'psql -c "CREATE DATABASE onlyoffice;"'
  su - postgres -c "psql -c \"CREATE USER onlyoffice WITH password 'onlyoffice';\""
  su - postgres -c 'psql -c "GRANT ALL privileges ON DATABASE onlyoffice TO onlyoffice;"'
fi

# check if db works correctly

$PSQL -c ";" >/dev/null 2>&1 || { echo "FAILURE"; exit 1; }

# db schema

$PSQL -d "onlyoffice" -f "$DIR/documentserver/server/schema/postgresql/createdb.sql" >/dev/null 2>&1

# install json

npm list -g json >/dev/null 2>&1 || npm install -g json >/dev/null 2>&1

# change port 8080 to 48080 for spellchecker to not conflict with tomcat

json -I -f $DEFAULT_CONFIG -e "this.SpellChecker.server.port = 48080" >/dev/null 2>&1

# change port 8000 to 48000 for coauth to not conflict with webvirtmgr

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.server.port = 48000" >/dev/null 2>&1

# postgres db settings

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.sql.dbHost = 'localhost'" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.sql.dbName= 'onlyoffice'" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.sql.dbUser = 'onlyoffice'" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.sql.dbPass = 'onlyoffice'" >/dev/null 2>&1

# RabbitMQ

json -I -f $DEFAULT_CONFIG -e "this.rabbitmq.url = 'amqp://guest:guest@localhost'" >/dev/null 2>&1

# redis

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.redis.host = 'localhost'" >/dev/null 2>&1

# enable jwt token for browser, inbox and outbox

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.token.enable.browser = ${JWT_ENABLED}" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.token.enable.request.inbox = ${JWT_ENABLED}" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.token.enable.request.outbox = ${JWT_ENABLED}" >/dev/null 2>&1

# set secret for session, inbox and outbox

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.secret.inbox.string = '${JWT_SECRET}'" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.secret.outbox.string = '${JWT_SECRET}'" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.secret.session.string = '${JWT_SECRET}'" >/dev/null 2>&1

# set header, define in JWT_HEADER

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.token.inbox.header = '${JWT_HEADER}'" >/dev/null 2>&1
json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.token.outbox.header = '${JWT_HEADER}'" >/dev/null 2>&1 

# Allow unauthorized SSL if enabled

json -I -f $DEFAULT_CONFIG -e "this.services.CoAuthoring.requestDefaults.rejectUnauthorized = ${REJECT_UNAUTHORIZED}" >/dev/null 2>&1

if [ -f /usr/share/nextcloud/occ ]; then # check if nextcloud is installed

    # Enable self-signed cert
    grep -q -F "'onlyoffice' => array ( 'verify_peer_off' => TRUE)" /usr/share/nextcloud/config/config.php || sed -i '$i'"'onlyoffice'"' => array ( '"'verify_peer_off'"' => TRUE)' /usr/share/nextcloud/config/config.php

    # Install onlyoffice app
    sudo -u apache /opt/rh/rh-php72/root/usr/bin/php /usr/share/nextcloud/occ app:install onlyoffice

    # Set DocumentServerUrl
    export fqdn=`config get SystemName`.`config get DomainName`
    export dshost=`config getprop fw_onlyoffice host || echo $fqdn`
    sudo -u apache /opt/rh/rh-php72/root/usr/bin/php /usr/share/nextcloud/occ config:app:set onlyoffice DocumentServerUrl --value="https://$dshost:`config getprop fw_onlyoffice TCPPort`/"

    # Set token secret
    sudo -u apache /opt/rh/rh-php72/root/usr/bin/php /usr/share/nextcloud/occ config:app:set onlyoffice jwt_secret --value="$JWT_SECRET"

    # Enable onlyoffice app
    sudo -u apache /opt/rh/rh-php72/root/usr/bin/php /usr/share/nextcloud/occ app:enable onlyoffice
fi

# check if webtop5 db is present to add onlyoffice config and restart webtop

su - postgres -c "psql -lqt | cut -d \| -f 1 | grep -q -w webtop5"
if [ $? -eq 1 ]; then

su - postgres -c "psql webtop5" <<EOF
INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.secret.in', '$(cat /var/lib/nethserver/secrets/onlyoffice)'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.secret.in'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.secret.out', '$(cat /var/lib/nethserver/secrets/onlyoffice)'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.secret.out'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.loopback.url', 'https://$(config getprop fw_onlyoffice host)/webtop'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.loopback.url'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.public.url', 'https://$(config getprop fw_onlyoffice host):8082'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.public.url'
);

INSERT INTO core.settings(service_id, key, value)
    SELECT 'com.sonicle.webtop.core', 'documentserver.enabled', 'true'
WHERE NOT EXISTS (
    SELECT 1 FROM core.settings WHERE key='documentserver.enabled'
);

UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.secret.in', value='$(cat /var/lib/nethserver/secrets/onlyoffice)' WHERE key='documentserver.secret.in';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.secret.out', value='$(cat /var/lib/nethserver/secrets/onlyoffice)' WHERE key='documentserver.secret.out';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.loopback.url', value='https://$(config getprop fw_onlyoffice host)/webtop' WHERE key='documentserver.loopback.url';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.public.url', value='https://$(config getprop fw_onlyoffice host):8082' WHERE key='documentserver.public.url';
UPDATE core.settings SET service_id='com.sonicle.webtop.core', key='documentserver.enabled', value='true' WHERE key='documentserver.enabled';
EOF

systemctl restart tomcat8@webtop

fi

# set owner of config file to onlyoffice

chown ds:ds $DEFAULT_CONFIG

# enable services - integrate?

systemctl enable supervisord --now
systemctl enable rabbitmq-server --now

# restart documentserver - integrate?

supervisorctl restart all
